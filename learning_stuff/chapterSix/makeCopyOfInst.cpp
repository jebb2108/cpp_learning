#include <iostream>

// Описание класса:
class MyClass
{
public:
    // Символьное поле:
    char code;
    // Поле - указатель на объект:
    MyClass* next;
    // Конструктор создании копии:
    MyClass(MyClass &obj)
    {
        // Значение поля next исходного объекта:
        obj.next=this;
        // Значение поля code создаваемого объекта:
        code=obj.code+1;
    }
    // Конструктор с символьным аргументом:
    MyClass(char s)
    {
        code=s;
    }
    // Деструктор:
    ~MyClass()
    {
        if(next) delete next;
        std::cout<<"Объект с полем "<<code<<" удален\n";
    }
    // Метод для отображения значения символьного поля:
    void show()
    {
        // Отображение значения поля:
        std::cout<<code<<" ";
        if(next)next->show();
    }
};

// Главная функция программы:
int main()
{
    using namespace std;
    // Целочисленная переменная:
    int n=10;
    // Динамическое создание объекта:
    MyClass* pnt=new MyClass('A');
    // Указатель на объект:
    MyClass *p;
    // Начальное значение указателя:
    p=pnt;
    // Создание цепочки объектов:
    for(int k=1;k<=n;++k)
    {
        // Создание очередного объекта:
        p=new MyClass(*p);
    }
    // Нулевая ссылка в поле next для последнего
    // объекта в цепочке:
    p->next=0;
    // Вызов метода для первого объекта в цепочке:
    pnt->show();
    cout<<endl;
    // Удаление первого объекта (с автоматическим
    // удалением всей цепочки объектов)
    delete pnt;
    return 0;
}
